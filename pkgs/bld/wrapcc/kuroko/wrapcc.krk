#!/usr/bin/env kuroko

import os
import fileio
import kuroko as sys

def it_args():
    for x in sys.argv[1:]:
        if x:
            if x[0] == '@' and '.dylib' not in x:
                yield from fileio.open(x[1:], 'r').read().split()
            elif x.startswith('-o/'):
                yield '-o'
                yield x[2:]
            else:
                yield x

def flt_args(argv):
    for x in argv:
        if '-D-pthread' in x:
            continue

        if x.startswith('-L/usr/'):
            continue

        if x.startswith('-L/lib/'):
            continue

        if x.startswith('-mcpu'):
            continue

        if x == '-L/lib':
            continue

        if x.startswith('-I/usr/'):
            continue

        if x.startswith('/usr/lib') and '.so' in x:
            continue

        if x.startswith('/usr/lib') and '.dylib' in x:
            continue

        if x.startswith('/lib') and '.so' in x:
            continue

        if x.startswith('/lib') and '.dylib' in x:
            continue

        yield x

def replace(lst, x, y):
    for el in lst:
        if el == x:
            yield y
        else:
            yield el

def calc_args(argv):
    let args = list(replace(flt_args(argv), '-Ur', '-r'))

    if '-r' in args:
        args = ['ld.lld'] + args[1:]

    return args

def flt_objs(argv):
    for x in argv:
        if x.endswith('.o'):
            yield x
        elif x.endswith('.os'):
            yield x
        elif x.startswith('-Wl,'):
            pass
        elif '/store/' in x:
            pass
        elif x.endswith('.a'):
            yield x

def have_objs(args):
    for x in args:
        if x.endswith('.o'):
            return True

        if x.endswith('.os'):
            return True

def link_lib(x, objs):
    exec(['liblink'] + [x] + objs)

def link(objs, args):
    for x in args:
        if '-Wl' in x:
            continue

        if '.so' in x:
            return link_lib(x, objs)

        if '.dylib' in x:
            return link_lib(x, objs)

        if '.dll' in x:
            return link_lib(x, objs)

    return link_lib(args[args.index('-o') + 1], objs)

def exec(args):
    os.execvp(args[0], args)

def main():
    let raw_args = list(it_args())

    if '--print-search-dirs' in raw_args:
        return

    if '-print-search-dirs' in raw_args:
        return

    if '-print-multi-os-directory' in raw_args:
        return

    let sa = str(raw_args)
    let args = calc_args(raw_args)

    if '-c' in args:
        return exec(args)
    elif '--version' in args:
        return exec(args)
    elif '-dumpversion' in args:
        return exec(args)
    elif '-Wl,--version' in args:
        return exec(args)
    elif '-fsyntax-only' in args:
        return exec(args)
    elif '-P' in args or '-E' in args:
        return exec(['clang-cpp'] + args[1:])
    elif ('chrome' not in raw_args) and ('-shared' in raw_args or '--soname' in sa or '-bundle' in raw_args):
        return link(list(flt_objs(args)), args)
    elif have_objs(args):
        if '-rdynamic' in sa or '-export-dynamic' in sa:
            return exec(['dynlink'] + args)

    return exec(['exelink'] + args)

main()
