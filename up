#!/usr/bin/env python3

import os
import sys
import json
import time
import subprocess

GOOD = frozenset('0123456789abcdef')

def call(*cmd):
    try:
        return subprocess.check_output(list(cmd), stderr=subprocess.STDOUT)
    except Exception as e:
        return e.stdout

def is_sha(x):
    x = x.removeprefix('sha:')

    if len(x) != 64:
        return False

    for ch in x:
        if ch not in GOOD:
            return False

    return True

def parse_sha(data):
    for l in data.split('\n'):
        for x in l.split(' '):
            if is_sha(x):
                return x

    raise Exception('no sha')

def subst_sha(data, to):
    return data.replace(parse_sha(data), to)

sent = '1' * 64

def fix1(pn, fr, to):
    with open(pn) as f:
        data = f.read()

    nd = subst_sha(data, sent).replace(fr, to)

    if nd:
        with open(pn, 'w') as f:
            f.write(nd)

def fix2(pn, sha):
    with open(pn) as f:
        data = f.read()

    nd = data.replace(sent, sha)

    with open(pn, 'w') as f:
        f.write(nd)

def it_recs():
    pkg = sys.argv[1]

    with open('pkgs/die/scripts/dump.json') as f:
        for l in f.read().split('\n'):
            if not l.strip():
                continue

            rec = json.loads(l)

            if rec['pkg_name'].startswith(pkg):
                yield rec

def it_pkgs():
    for c in it_recs():
        yield c['ix_pkg_full_name']

def it_files(pkgs):
    for p in pkgs:
        for x in subprocess.check_output(['./ix', 'dep', p]).decode().split('\n'):
            if x.strip():
                yield x.strip()

pkgs = list(it_pkgs())
files = frozenset(it_files(pkgs))

for f in files:
    print(f'prepare {f}')
    fix1('pkgs/' + f, sys.argv[2], sys.argv[3])

subprocess.check_call(['git', 'diff'])

out = call('./ix', 'build', pkgs).decode()
sha = parse_sha(out.replace(sent, ''))

for f in files:
    print(f'fix {f}')
    fix2('pkgs/' + f, sha)

subprocess.check_call(['git', 'diff'])
